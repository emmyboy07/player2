<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no"/>
  <title><%= title %></title>
  <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css"/>
  <style>
    html, body {
      height: 100%;
      margin: 0;
      padding: 0;
      background: #000;
      color: #fff;
      font-family: 'Segoe UI', Arial, sans-serif;
      overflow: hidden;
    }
    body, #player-container {
      width: 100vw;
      height: 100vh;
      position: relative;
      display: flex;
      flex-direction: column;
      justify-content: flex-end;
      align-items: stretch;
    }
    #video {
      position: absolute;
      inset: 0;
      width: 100vw;
      height: 100vh;
      object-fit: contain;
      background: #000;
      z-index: 0;
    }
    /* Spinner */
    #spinner {
      position: absolute;
      left: 50%;
      top: 50%;
      width: 60px;
      height: 60px;
      margin-left: -30px;
      margin-top: -30px;
      border: 6px solid #222;
      border-top: 6px solid #e50914;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      z-index: 100;
      display: none;
    }
    @keyframes spin {
      0% { transform: rotate(0deg);}
      100% { transform: rotate(360deg);}
    }
    .player-title {
      position: absolute;
      top: 32px;
      left: 0;
      width: 100vw;
      text-align: center;
      font-size: 1.3rem;
      font-weight: 500;
      color: #fff;
      z-index: 10;
      text-shadow: 0 2px 8px #000;
      pointer-events: none;
    }
    .center-controls {
      position: absolute;
      top: 0; left: 0; right: 0; bottom: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 10;
      pointer-events: none;
    }
    .center-controls-inner {
      width: 100vw;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 48px;
      pointer-events: auto;
    }
    .seek-btn {
      width: 10vw;
      max-width: 48px;
      height: 10vw;
      max-height: 48px;
      border: 2px solid #fff;
      border-radius: 50%;
      background: transparent;
      color: #fff;
      font-size: 1.2rem;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      position: relative;
      pointer-events: auto;
      transition: none;
    }
    .seek-btn .fa {
      font-size: 1.2rem;
      margin-bottom: 2px;
    }
    .seek-btn span {
      font-size: 1.1rem;
      font-weight: 500;
      position: absolute;
      bottom: 10px;
      left: 50%;
      transform: translateX(-50%);
      color: #fff;
      letter-spacing: -1px;
    }
    .playpause-btn {
      background: none;
      border: none;
      outline: none;
      color: #fff;
      font-size: 2.2rem;
      margin: 0 2vw;
      padding: 0;
      cursor: pointer;
      pointer-events: auto;
      box-shadow: none;
      line-height: 1;
      transition: none;
    }
    .playpause-btn:focus {
      outline: none;
    }
    .playpause-btn:hover {
      background: none;
      border: none;
      outline: none;
      color: #fff;
    }
    /* Redesigned progress bar */
    .progress-bar-row {
      position: absolute;
      left: 0;
      right: 0;
      bottom: 96px;
      width: 100vw;
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 20;
      pointer-events: none;
    }
    .progress-bar-container {
      width: 96vw;
      max-width: 99vw;
      min-width: 0;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      pointer-events: auto;
      position: relative;
      height: 32px;
      background: transparent;
    }
    .progress-bar-track,
    .progress-bar-fill,
    .progress-bar-thumb,
    .progress-bar-input {
      position: static;
    }
    .progress-bar-track {
      flex: 1;
      height: 4px;
      background: #fff;
      border-radius: 2px;
      z-index: 1;
      position: relative;
    }
    .progress-bar-fill {
      position: absolute;
      left: 0;
      top: 50%;
      height: 4px;
      background: #e50914;
      border-radius: 2px 0 0 2px;
      z-index: 2;
      pointer-events: none;
      transform: translateY(-50%);
    }
    .progress-bar-thumb {
      position: absolute;
      top: 50%;
      width: 16px;
      height: 16px;
      background: #e50914;
      border-radius: 50%;
      border: 3px solid #f60f0f;
      z-index: 3;
      pointer-events: none;
      transition: left 0.1s;
      box-sizing: border-box;
      transform: translateY(-50%);
    }
    .progress-bar-input {
      flex: 1;
      height: 32px;
      opacity: 0;
      z-index: 4;
      cursor: pointer;
      position: absolute;
      left: 0;
      top: 0;
      width: 100%;
    }
    .progress-time {
      color: #fff;
      font-size: 1rem;
      font-variant-numeric: tabular-nums;
      letter-spacing: 1px;
      min-width: 32px;
      text-align: right;
      z-index: 5;
      pointer-events: none;
      white-space: nowrap;
      margin-left: 12px;
      position: static;
      transform: none;
    }
    /* Bottom bar */
    .player-bottom-bar {
      position: absolute;
      left: 0;
      right: 0;
      bottom: 24px;
      width: 100vw;
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 20;
      pointer-events: none;
    }
    .bottom-bar-inner {
      width: 92vw;
      max-width: 900px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: 1.5rem;
      pointer-events: auto;
    }
    .bottom-bar-btn {
      display: flex;
      flex-direction: column;
      align-items: center;
      color: #fff;
      background: none;
      border: none;
      font-size: 0.95rem;
      min-width: 36px;
      padding: 0.3em 0.5em;
      cursor: pointer;
      pointer-events: auto;
      transition: color 0.2s;
      outline: none;
    }
    .bottom-bar-btn .fa {
      font-size: 1.1rem;
      margin-bottom: 2px;
    }
    .bottom-bar-btn:focus {
      outline: 2px solid #fff;
    }
    .locked .center-controls,
    .locked .progress-bar-row,
    .locked .player-bottom-bar,
    .locked .player-title {
      opacity: 0.2;
      pointer-events: none !important;
      user-select: none;
    }
    .locked .bottom-bar-btn.lock-btn {
      opacity: 1 !important;
      pointer-events: auto !important;
    }
    /* Responsive for mobile and auto-rotate */
    @media (max-width: 600px) {
      .player-title { font-size: 1rem; top: 10px; }
      .center-controls-inner { gap: 12vw; }
      .seek-btn { width: 12vw; max-width: 36px; height: 12vw; max-height: 36px; font-size: 1rem; }
      .playpause-btn { font-size: 1.5rem; margin: 0 2vw; }
      .progress-bar-row { bottom: 50px; }
      .progress-bar-container { width: 98vw; }
      .player-bottom-bar { bottom: 4px; }
      .bottom-bar-inner { width: 99vw; gap: 0.3rem; }
      .bottom-bar-btn { font-size: 0.85rem; min-width: 28px; }
      .bottom-bar-btn .fa { font-size: 1rem; }
      .progress-time { min-width: 24px; font-size: 0.9rem; }
      #subtitle-display { font-size: 1rem; bottom: 70px; }
    }
    @media (orientation: landscape) {
      body, #player-container {
        flex-direction: row;
        align-items: stretch;
      }
      .player-title { top: 16px; font-size: 1.1rem; }
      .progress-bar-container, .bottom-bar-inner { max-width: 98vw; }
    }
    #subtitle-preview-modal { animation: fadeIn 0.2s; }
    @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }
    .hide-controls .center-controls,
.hide-controls .progress-bar-row,
.hide-controls .player-bottom-bar,
.hide-controls .player-title {
  opacity: 0;
  pointer-events: none;
  transition: opacity 0.3s;
}
.center-controls,
.progress-bar-row,
.player-bottom-bar,
.player-title {
  transition: opacity 0.3s;
}
  </style>
</head>
<body>
  <div id="player-container">
    <div id="spinner"></div>
    <video id="video" autoplay></video>
    <div class="player-title"><%= title %></div>
    <div class="center-controls" id="centerControls">
      <div class="center-controls-inner">
        <button id="seek-back" class="seek-btn" title="Back 10s">
          <i class="fas fa-rotate-left"></i>
          <span></span>
        </button>
        <button id="center-play" class="playpause-btn" title="Play/Pause">
          <i class="fas fa-pause"></i>
        </button>
        <button id="seek-forward" class="seek-btn" title="Forward 10s">
          <i class="fas fa-rotate-right"></i>
          <span></span>
        </button>
      </div>
    </div>
    <div class="progress-bar-row">
      <div class="progress-bar-container" id="progressBarContainer">
        <div class="progress-bar-track"></div>
        <div class="progress-bar-fill" id="progressFill"></div>
        <div class="progress-bar-thumb" id="progressThumb"></div>
        <input id="progress" type="range" min="0" max="100" value="0" class="progress-bar-input" />
        <span class="progress-time" id="duration">0:00</span>
      </div>
    </div>
    <div class="player-bottom-bar">
      <div class="bottom-bar-inner">
        <button class="bottom-bar-btn lock-btn" id="lockBtn" tabindex="0">
          <i class="fas fa-lock-open" id="lockIcon"></i>
          <span id="lockText">Lock</span>
        </button>
        <button class="bottom-bar-btn" id="pipBtn" tabindex="0">
          <i class="fas fa-clone"></i>
          <span>PiP</span>
        </button>
        <button class="bottom-bar-btn" id="settingsBtn" tabindex="0">
          <i class="fas fa-cog"></i>
          <span>Settings</span>
        </button>
        <button class="bottom-bar-btn" id="fullscreenBtn" tabindex="0">
          <i class="fas fa-expand"></i>
          <span>Fullscreen</span>
        </button>
      </div>
    </div>
    <!-- Settings Popup -->
    <div id="settings-popup" style="display:none; position:fixed; left:50%; top:50%; transform:translate(-50%,-50%); background:#222; color:#fff; padding:24px 32px; border-radius:12px; z-index:999;">
      <button id="settings-popup-close" style="position:absolute; top:8px; right:12px; background:none; border:none; color:#fff; font-size:1.5rem; cursor:pointer;">&times;</button>
      <div style="margin-bottom:16px; font-size:1.2rem;">Quality</div>
      <select id="quality-selector-popup" style="width:100%; font-size:1.1rem; padding:6px 8px; border-radius:6px; border:1px solid #444; background:#111; color:#fff;"></select>
      <div style="margin:16px 0 8px 0; font-size:1.2rem;">Subtitles</div>
      <select id="subtitle-selector-popup" style="width:100%; font-size:1.1rem; padding:6px 8px; border-radius:6px; border:1px solid #444; background:#111; color:#fff;">
        <option value="">None</option>
      </select>
      <div style="margin:12px 0 0 0;">
        <label for="subtitle-upload" style="font-size:1rem; color:#fff; cursor:pointer;">
          <i class="fas fa-upload"></i> Upload Subtitle
        </label>
        <input type="file" id="subtitle-upload" accept=".srt,.vtt" style="display:none;">
      </div>
    </div>
  </div>
  <script>
    const video = document.getElementById('video');
    const videoSrc = "<%= videoUrl %>";
    const playPause = document.getElementById('center-play');
    const seekBack = document.getElementById('seek-back');
    const seekForward = document.getElementById('seek-forward');
    const progress = document.getElementById('progress');
    const duration = document.getElementById('duration');
    const progressFill = document.getElementById('progressFill');
    const progressThumb = document.getElementById('progressThumb');
    const progressBarContainer = document.getElementById('progressBarContainer');
    const lockBtn = document.getElementById('lockBtn');
    const lockIcon = document.getElementById('lockIcon');
    const lockText = document.getElementById('lockText');
    const playerContainer = document.getElementById('player-container');
    const pipBtn = document.getElementById('pipBtn');
    const spinner = document.getElementById('spinner');
    const centerControls = document.getElementById('centerControls');
    const settingsPopup = document.getElementById('settings-popup');
    const settingsBtn = document.getElementById('settingsBtn');
    const settingsPopupClose = document.getElementById('settings-popup-close');
    const qualitySelectorPopup = document.getElementById('quality-selector-popup');
    const subtitleSelectorPopup = document.getElementById('subtitle-selector-popup');
    const wyzieSubtitles = <%- JSON.stringify(wyzieSubtitles || []) %>;
    // Language code to full name map
const languageNames = {
  en: "English", ar: "Arabic", fr: "French", es: "Spanish", de: "German", it: "Italian", ru: "Russian",
  pt: "Portuguese", nl: "Dutch", tr: "Turkish", ja: "Japanese", zh: "Chinese", ko: "Korean", hi: "Hindi",
  sv: "Swedish", pl: "Polish", ro: "Romanian", ms: "Malay", th: "Thai", sq: "Albanian", fi: "Finnish",
  sr: "Serbian", el: "Greek", bg: "Bulgarian", he: "Hebrew", cs: "Czech", sk: "Slovak", sl: "Slovenian",
  lt: "Lithuanian", bn: "Bengali", ur: "Urdu", fa: "Persian", vi: "Vietnamese", hu: "Hungarian", ku: "Kurdish"
};

let currentSubtitleTrack = null;
let loadedSubtitles = wyzieSubtitles.slice(); // Use the server-fetched subtitles as default

// Populate subtitle dropdown with full language names, default to English if available
function populateSubtitleSelector() {
  subtitleSelectorPopup.innerHTML = '<option value="">None</option>';
  let defaultIdx = null;
  loadedSubtitles.forEach((sub, idx) => {
    const opt = document.createElement('option');
    opt.value = idx;
    // Prefer display name if available, else use language code mapped to full name
    const langFull = sub.lanName || languageNames[sub.lan] || languageNames[sub.language] || sub.language || sub.display || "Unknown";
    opt.textContent = langFull;
    subtitleSelectorPopup.appendChild(opt);
    // Set default to English if found
    if (
      (sub.lan && sub.lan.toLowerCase() === "en") ||
      (sub.language && sub.language.toLowerCase() === "en") ||
      (langFull.toLowerCase().includes("english"))
    ) {
      defaultIdx = idx;
    }
  });
  // Set default to English if available
  if (defaultIdx !== null) {
    subtitleSelectorPopup.value = defaultIdx;
    subtitleSelectorPopup.dispatchEvent(new Event('change'));
  }
}
populateSubtitleSelector();

// When user selects a subtitle, load it immediately
subtitleSelectorPopup.addEventListener('change', function() {
  // Remove previous track
  if (currentSubtitleTrack) {
    video.removeChild(currentSubtitleTrack);
    currentSubtitleTrack = null;
  }
  const idx = this.value;
  if (idx === "" || !loadedSubtitles[idx]) return;

  // Add new track
  const sub = loadedSubtitles[idx];
  const track = document.createElement('track');
  track.kind = 'subtitles';
  // Use full language name for label
  const langFull = sub.lanName || languageNames[sub.lan] || languageNames[sub.language] || sub.language || sub.display || "Unknown";
  track.label = langFull;
  track.srclang = sub.lan || sub.language || "en";
  track.src = sub.url; // <-- Use the remote URL directly
  track.default = true;
  video.appendChild(track);
  currentSubtitleTrack = track;
  // Force immediate display
  setTimeout(() => {
    if (track.track && track.track.mode !== "showing") {
      track.track.mode = "showing";
    }
  }, 100);
  console.log(`[SUBTITLE] Selected: ${langFull} (${sub.url})`);
});

    // Spinner logic: only show when loading/buffering, hide when controls are visible
    function showSpinner() {
      spinner.style.display = 'block';
      centerControls.style.display = 'none';
    }
    function hideSpinner() {
      spinner.style.display = 'none';
      centerControls.style.display = '';
    }
    showSpinner();
    video.addEventListener('canplay', hideSpinner);
    video.addEventListener('playing', hideSpinner);
    video.addEventListener('waiting', showSpinner);
    video.addEventListener('seeking', showSpinner);

    // HLS setup
    if (/\.m3u8($|\?)/i.test(videoSrc)) {
      if (Hls.isSupported()) {
        const hls = new Hls();
        hls.loadSource(videoSrc);
        hls.attachMedia(video);
        hls.on(Hls.Events.MANIFEST_PARSED, function() {
          video.play().catch(()=>{});
        });
      } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
        video.src = videoSrc;
        video.addEventListener('loadedmetadata', () => video.play().catch(()=>{}));
      } else {
        alert("Your browser does not support HLS playback.");
      }
    } else {
      // For direct MP4 or other supported formats
      video.src = videoSrc;
      video.addEventListener('loadedmetadata', () => video.play().catch(()=>{}));
    }

    // Hide default controls
    video.controls = false;

    // Play/Pause
    playPause.addEventListener('click', () => {
      if (video.paused) {
        video.play();
      } else {
        video.pause();
      }
    });
    video.addEventListener('play', () => {
      playPause.innerHTML = '<i class="fas fa-pause"></i>';
    });
    video.addEventListener('pause', () => {
      playPause.innerHTML = '<i class="fas fa-play"></i>';
    });

    // Seek back 10s
    seekBack.addEventListener('click', () => {
      video.currentTime = Math.max(0, video.currentTime - 10);
    });

    // Seek forward 10s
    seekForward.addEventListener('click', () => {
      video.currentTime = Math.min(video.duration, video.currentTime + 10);
    });

    // Progress bar update
    function updateProgressBar() {
      const percent = (video.currentTime / video.duration) * 100 || 0;
      progress.value = percent;
      // Fill bar
      progressFill.style.width = percent + '%';
      // Thumb
      const containerWidth = progressBarContainer.offsetWidth;
      const thumbWidth = progressThumb.offsetWidth;
      const thumbLeft = (percent / 100) * containerWidth - thumbWidth / 2;
      progressThumb.style.left = `calc(${percent}% - ${thumbWidth/2}px)`;
      // Always show duration
      duration.textContent = formatTime(video.duration);
    }

    video.addEventListener('timeupdate', updateProgressBar);
    video.addEventListener('loadedmetadata', () => {
      updateProgressBar();
    });
    progress.addEventListener('input', () => {
      video.currentTime = (progress.value / 100) * video.duration;
      updateProgressBar();
    });

    // Format time (HH:MM:SS or MM:SS)
    function formatTime(time) {
      if (!isFinite(time)) return '0:00';
      const hours = Math.floor(time / 3600);
      const minutes = Math.floor((time % 3600) / 60);
      const seconds = Math.floor(time % 60).toString().padStart(2, '0');
      if (hours > 0) {
        return `${hours}:${minutes.toString().padStart(2, '0')}:${seconds}`;
      } else {
        return `${minutes}:${seconds}`;
      }
    }

    // Lock functionality
    let locked = false;
    lockBtn.addEventListener('click', () => {
      locked = !locked;
      if (locked) {
        playerContainer.classList.add('locked');
        lockIcon.classList.remove('fa-lock-open');
        lockIcon.classList.add('fa-lock');
        lockText.textContent = 'Unlock';
      } else {
        playerContainer.classList.remove('locked');
        lockIcon.classList.remove('fa-lock');
        lockIcon.classList.add('fa-lock-open');
        lockText.textContent = 'Lock';
      }
    });

    // Prevent interaction when locked except lock button
    document.addEventListener('click', (e) => {
      if (locked && !lockBtn.contains(e.target)) {
        e.stopPropagation();
        e.preventDefault();
      }
    }, true);
    document.addEventListener('keydown', (e) => {
      if (locked && !lockBtn.contains(document.activeElement)) {
        e.stopPropagation();
        e.preventDefault();
      }
    }, true);

    // Picture-in-Picture
    pipBtn.addEventListener('click', async () => {
      if (document.pictureInPictureElement) {
        document.exitPictureInPicture();
      } else if (document.pictureInPictureEnabled) {
        try {
          await video.requestPictureInPicture();
        } catch (e) {
          alert('Picture-in-Picture not supported or failed.');
        }
      }
    });

    // Auto-rotate for mobile
    function handleOrientation() {
      if (window.screen.orientation && window.screen.orientation.lock) {
        if (window.innerWidth > window.innerHeight) {
          window.screen.orientation.lock('landscape').catch(()=>{});
        } else {
          window.screen.orientation.lock('portrait').catch(()=>{});
        }
      }
    }
    window.addEventListener('resize', handleOrientation);
    window.addEventListener('orientationchange', handleOrientation);
    handleOrientation();

    // Try to play on first user interaction if autoplay was blocked
    let triedAutoPlay = false;
    function tryPlayOnUserGesture() {
      if (!triedAutoPlay && video.paused) {
        video.play().catch(()=>{});
        triedAutoPlay = true;
      }
    }
    document.addEventListener('click', tryPlayOnUserGesture, { once: true });
    document.addEventListener('touchstart', tryPlayOnUserGesture, { once: true });

    // Assume the server provides an array of sources like:
    // [{url: "...", label: "1080p", type: "hls"}, {url: "...", label: "720p", type: "hls"}, ...]
    // You must pass this as videoSources from your backend
    const videoSources = <%- JSON.stringify(videoSources) %>;
    let currentSourceIndex = 0;
    let hls = null;

    // --- Quality Selector Logic ---

    // Show the active quality at the top of the popup
    function populateQualitySelectorPopup() {
      if (!qualitySelectorPopup) return;
      qualitySelectorPopup.innerHTML = '';

      // Add the active quality as the first option (disabled, shows "Current: ...")
      const current = videoSources[currentSourceIndex];
      const currentOpt = document.createElement('option');
      currentOpt.value = currentSourceIndex;
      currentOpt.textContent = `Current: ${current.label || `Quality ${currentSourceIndex + 1}`}`;
      currentOpt.disabled = true;
      currentOpt.selected = true;
      qualitySelectorPopup.appendChild(currentOpt);

      // Add all other qualities (except the current one)
      videoSources.forEach((src, i) => {
        if (i === currentSourceIndex) return;
        const opt = document.createElement('option');
        opt.value = i;
        opt.textContent = src.label || `Quality ${i + 1}`;
        qualitySelectorPopup.appendChild(opt);
      });
    }

    // When switching quality, keep the current time and play state
    function switchSource(newIndex) {
      if (newIndex === currentSourceIndex) return;
      const prevTime = video.currentTime;
      const wasPaused = video.paused;
      const prevMuted = video.muted;

      // Remove old HLS instance if any
      if (hls) {
        hls.destroy();
        hls = null;
      }

      // Switch source
      const src = videoSources[newIndex];
      if (/\.m3u8($|\?)/i.test(src.url)) {
        if (Hls.isSupported()) {
          hls = new Hls();
          hls.loadSource(src.url);
          hls.attachMedia(video);
          hls.on(Hls.Events.MANIFEST_PARSED, function () {
            video.currentTime = prevTime;
            video.muted = prevMuted;
            if (!wasPaused) video.play().catch(() => {});
          });
        } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
          video.src = src.url;
          video.addEventListener('loadedmetadata', function handler() {
            video.removeEventListener('loadedmetadata', handler);
            video.currentTime = prevTime;
            video.muted = prevMuted;
            if (!wasPaused) video.play().catch(() => {});
          });
        } else {
          alert("Your browser does not support HLS playback.");
        }
      } else {
        video.src = src.url;
        video.addEventListener('loadedmetadata', function handler() {
          video.removeEventListener('loadedmetadata', handler);
          video.currentTime = prevTime;
          video.muted = prevMuted;
          if (!wasPaused) video.play().catch(() => {});
        });
      }
      currentSourceIndex = newIndex;
    }

    // Update selector when switching
    function syncQualitySelectorPopup(idx) {
      populateQualitySelectorPopup();
    }

    function handleQualityChange(e) {
      const idx = parseInt(e.target.value, 10);
      if (idx === currentSourceIndex) return;
      switchSource(idx);
      settingsPopup.style.display = 'none';
      setTimeout(() => {
        syncQualitySelectorPopup(currentSourceIndex);
      }, 300);
    }
    if (qualitySelectorPopup) qualitySelectorPopup.addEventListener('change', handleQualityChange);

    settingsBtn.addEventListener('click', (e) => {
      e.stopPropagation();
      populateQualitySelectorPopup();
      settingsPopup.style.display = 'block';

      // Only fetch if not already loaded
      if (!loadedSubtitles.length && "<%= tmdbId %>") {
        subtitleSelectorPopup.innerHTML = '<option>Loading...</option>';
        fetch(`/subtitles?tmdb=<%= tmdbId %>`)
          .then(res => res.json())
          .then(data => {
            loadedSubtitles = data;
            subtitleSelectorPopup.innerHTML = '<option value="">None</option>';
            loadedSubtitles.forEach((sub, idx) => {
              const opt = document.createElement('option');
              opt.value = idx;
              opt.textContent = sub.language || '';
              subtitleSelectorPopup.appendChild(opt);
            });
          })
          .catch(() => {
            subtitleSelectorPopup.innerHTML = '<option value="">None</option>';
          });
      }
    });

    // Ensure the close button closes the settings popup
    settingsPopupClose.addEventListener('click', () => {
      console.log('[SETTINGS] Close button clicked');
      settingsPopup.style.display = 'none';
    });

    // Also close popup if user clicks outside of it
    window.addEventListener('mousedown', (e) => {
      if (
        settingsPopup.style.display === 'block' &&
        !settingsPopup.contains(e.target) &&
        !settingsBtn.contains(e.target)
      ) {
        console.log('[SETTINGS] Clicked outside settings popup, closing');
        settingsPopup.style.display = 'none';
      }
    });

    // Populate subtitle dropdown with only language codes and log selection
    function populateSubtitleSelector() {
      subtitleSelectorPopup.innerHTML = '<option value="">None</option>';
      loadedSubtitles.forEach((sub, idx) => {
        const opt = document.createElement('option');
        opt.value = idx;
        opt.textContent = sub.language || '';
        subtitleSelectorPopup.appendChild(opt);
      });
    }
    populateSubtitleSelector();

    subtitleSelectorPopup.addEventListener('change', function() {
      // Remove previous track
      if (currentSubtitleTrack) {
        video.removeChild(currentSubtitleTrack);
        currentSubtitleTrack = null;
      }
      const idx = this.value;
      if (idx === "" || !loadedSubtitles[idx]) return;

      // Add new track
      const sub = loadedSubtitles[idx];
      console.log(`[SUBTITLE] Selected: ${sub.language} (${sub.url})`);
      const track = document.createElement('track');
      track.kind = 'subtitles';
      track.label = sub.language;
      track.srclang = sub.language;
      track.src = sub.url;
      track.default = true;
      video.appendChild(track);
      currentSubtitleTrack = track;
    });

    // Optional: Remove subtitle if "None" is selected
    subtitleSelectorPopup.value = "";

    // --- Fullscreen Logic ---
    const fullscreenBtn = document.getElementById('fullscreenBtn');
    function toggleFullscreen() {
      // Request fullscreen
      if (!document.fullscreenElement && !document.webkitFullscreenElement) {
        if (playerContainer.requestFullscreen) {
          playerContainer.requestFullscreen();
        } else if (playerContainer.webkitRequestFullscreen) {
          playerContainer.webkitRequestFullscreen();
        }
        // Auto-rotate to landscape on mobile when entering fullscreen
        if (
          /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) &&
          window.screen.orientation && window.screen.orientation.lock
        ) {
          window.screen.orientation.lock('landscape').catch(()=>{});
        }
      } else {
        if (document.exitFullscreen) {
          document.exitFullscreen();
        } else if (document.webkitExitFullscreen) {
          document.webkitExitFullscreen();
        }
        // Optionally unlock orientation when exiting fullscreen
        if (
          /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) &&
          window.screen.orientation && window.screen.orientation.unlock
        ) {
          window.screen.orientation.unlock();
        }
      }
    }
    fullscreenBtn.addEventListener('click', toggleFullscreen);

    function updateFullscreenIcon() {
      if (document.fullscreenElement || document.webkitFullscreenElement) {
        fullscreenBtn.querySelector('i').classList.remove('fa-expand');
        fullscreenBtn.querySelector('i').classList.add('fa-compress');
        fullscreenBtn.querySelector('span').textContent = 'Exit Fullscreen';
      } else {
        fullscreenBtn.querySelector('i').classList.remove('fa-compress');
        fullscreenBtn.querySelector('i').classList.add('fa-expand');
        fullscreenBtn.querySelector('span').textContent = 'Fullscreen';
      }
    }
    document.addEventListener('fullscreenchange', updateFullscreenIcon);
    document.addEventListener('webkitfullscreenchange', updateFullscreenIcon);

    let controlsTimeout = null;
    let controlsVisible = true;

    function showControls() {
      if (!controlsVisible) {
        playerContainer.classList.remove('hide-controls');
        controlsVisible = true;
      }
      clearTimeout(controlsTimeout);
      controlsTimeout = setTimeout(hideControls, 2500);
    }

    function hideControls() {
      if (!video.paused && !locked) {
        playerContainer.classList.add('hide-controls');
        controlsVisible = false;
      }
    }

    // Show controls on mouse move/tap
    ['mousemove', 'touchstart'].forEach(evt => {
      playerContainer.addEventListener(evt, showControls);
    });

    // Always show controls when paused or locked
    video.addEventListener('pause', () => {
      playerContainer.classList.remove('hide-controls');
      controlsVisible = true;
    });
    lockBtn.addEventListener('click', () => {
      if (locked) {
        playerContainer.classList.remove('hide-controls');
        controlsVisible = true;
      }
    });

    // Hide controls after a delay when playing
    video.addEventListener('play', () => {
      showControls();
    });

    // Initially hide controls after a delay if playing
    if (!video.paused) {
      showControls();
    }

    document.addEventListener('keydown', (e) => {
      if (settingsPopup.style.display === 'flex') return;
      if (locked) return;
      switch (e.key.toLowerCase()) {
        case ' ':
        case 'k':
          e.preventDefault();
          if (video.paused) video.play();
          else video.pause();
          break;
        case 'arrowleft':
        case 'j':
          e.preventDefault();
          video.currentTime = Math.max(0, video.currentTime - 10);
          break;
        case 'arrowright':
        case 'l':
          e.preventDefault();
          video.currentTime = Math.min(video.duration, video.currentTime + 10);
          break;
        case 'f':
          e.preventDefault();
          toggleFullscreen();
          break;
        case 'm':
          e.preventDefault();
          video.muted = !video.muted;
          break;
      }
    });

const subtitleUpload = document.getElementById('subtitle-upload');

// Handle user subtitle upload
subtitleUpload.addEventListener('change', function() {
  const file = this.files[0];
  if (!file) return;
  const ext = file.name.split('.').pop().toLowerCase();
  if (ext !== 'srt' && ext !== 'vtt') {
    alert('Only .srt or .vtt files are supported.');
    return;
  }
  // Remove previous track
  if (currentSubtitleTrack) {
    video.removeChild(currentSubtitleTrack);
    currentSubtitleTrack = null;
  }
  const track = document.createElement('track');
  track.kind = 'subtitles';
  track.label = 'Custom';
  track.srclang = 'custom';
  track.default = true;

  // Convert SRT to VTT if needed
  if (ext === 'srt') {
    const reader = new FileReader();
    reader.onload = function(e) {
      const srt = e.target.result;
      const vtt = "WEBVTT\n\n" + srt
        .replace(/\r+/g, '')
        .replace(/^\s+|\s+$/g, '')
        .replace(/(\d+)\n(\d{2}:\d{2}:\d{2},\d{3}) --> (\d{2}:\d{2}:\d{2},\d{3})/g, '$2 --> $3')
        .replace(/,/g, '.');
      const blob = new Blob([vtt], { type: 'text/vtt' });
      track.src = URL.createObjectURL(blob);
      video.appendChild(track);
      currentSubtitleTrack = track;
      console.log('[SUBTITLE] User uploaded SRT subtitle');
    };
    reader.readAsText(file);
  } else {
    // VTT file
    track.src = URL.createObjectURL(file);
    video.appendChild(track);
    currentSubtitleTrack = track;
    console.log('[SUBTITLE] User uploaded VTT subtitle');
  }
});

// Allow clicking the label to open file dialog
document.querySelector('label[for="subtitle-upload"]').addEventListener('click', () => {
  subtitleUpload.click();
});

    // --- CORS workaround for subtitle tracks ---
    // If you control the backend, proxy subtitle requests through your server:
    // function proxySubtitleUrl(url) {
    //   // Only proxy if it's a remote subtitle (not a blob or local file)
    //   if (/^https?:\/\//.test(url) && !url.startsWith(window.location.origin)) {
    //     return `/proxy-subtitle?url=${encodeURIComponent(url)}`;
    //   }
    //   return url;
    // }

    // Update subtitle loading to use proxy
    subtitleSelectorPopup.addEventListener('change', function() {
      // Remove previous track
      if (currentSubtitleTrack) {
        video.removeChild(currentSubtitleTrack);
        currentSubtitleTrack = null;
      }
      const idx = this.value;
      if (idx === "" || !loadedSubtitles[idx]) return;

      // Add new track
      const sub = loadedSubtitles[idx];
      console.log(`[SUBTITLE] Selected: ${sub.language} (${sub.url})`);
      const track = document.createElement('track');
      track.kind = 'subtitles';
      track.label = sub.language;
      track.srclang = sub.language;
      track.src = sub.url;
      track.default = true;
      video.appendChild(track);
      currentSubtitleTrack = track;
    });
  </script>
</body>
</html>
